#!/bin/sh

## live-build(7) - System Build Scripts
## Copyright (C) 2006-2015 Daniel Baumann <mail@daniel-baumann.ch>
##
## This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.


set -e

# Including common functions
[ -e "${LIVE_BUILD}/scripts/build.sh" ] && . "${LIVE_BUILD}/scripts/build.sh" || . /usr/lib/live/build.sh

# Setting static variables
DESCRIPTION="Debian sources"
USAGE="${PROGRAM} [--force]"

# Processing arguments and configuration files
Init_config_data "${@}"

if [ "${LB_SOURCE}" != "true" ]
then
	exit 0
fi

Echo_message "Begin downloading sources..."

# Requiring stage file
Require_stagefile .build/config .build/bootstrap

# Checking stage file
Check_stagefile .build/source_debian

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

# Remove old sources
if [ -d source/debian ]
then
	rm -rf source/debian
fi

# Download sources
Chroot chroot "dpkg --get-selections" | awk '{ print $1 }' > source-selection.txt

echo "${LB_BOOTLOADERS}" | \
while IFS="," read -r BOOTLOADER
do
	echo "${BOOTLOADER}" >> source-selection.txt
done

echo "live-build" >> source-selection.txt

case "${LB_BINARY_IMAGES}" in
	iso*)
		echo "xorriso" >> source-selection.txt
		;;

	hdd*)
		echo "parted" >> source-selection.txt
		;;
esac

case "${LB_CHROOT_FILESYSTEM}" in
	squashfs)
		echo "squashfs-tools" >> source-selection.txt
		;;
esac

case "${LB_BINARY_FILESYSTEM}" in
	fat*)
		echo "dosfstools" >> source-selection.txt
		;;

	ntfs)
		echo "ntfs-3g" >> source-selection.txt
		;;
esac

case "${LB_ARCHITECTURES}" in
	amd64|i386)
		echo "mtools" >> source-selection.txt
		echo "syslinux" >> source-selection.txt
		echo "grub" >> source-selection.txt

		if [ "${LB_MEMTEST}" != "none" ]; then
			echo "${LB_MEMTEST}" >> source-selection.txt
		fi
		;;
esac

if [ -n "${LB_TASKS}" ]
then
	echo "${LB_TASKSEL}" >> source-selection.txt
fi

# apt-get source does not respect pinning
# building images with backports included but not enabled
# will result in apt-get source download stuff from backports
# where available. workaround: disable backports
case "${LB_MODE}" in
	progress-linux)
		case "${LB_DISTRIBUTION_BINARY}" in
			*-backports)

				;;

			*)
				if grep -qs "${LB_DISTRIBUTION_BINARY}-backports" chroot/etc/apt/sources.list.d/progress-linux.list
				then
					cp chroot/etc/apt/sources.list.d/progress-linux.list chroot/etc/apt/sources.list.d/progress-linux.list.orig

					while read -r _LINE
					do
						if echo "${_LINE}" | grep -qs ${LB_DISTRIBUTION_BINARY}-backports
						then
							sed -i -e "s|${_LINE}|#${_LINE}|" chroot/etc/apt/sources.list.d/progress-linux.list
						fi
					done < chroot/etc/apt/sources.list.d/progress-linux.list.orig

					Apt chroot update
				fi
				;;
		esac
		;;
esac

mkdir -p chroot/source.pkgs

cat > chroot/missing-source.txt << EOF
This file contains the list of binary packages that are installed on the "live"
system (to which this source disc is a companion) for which a corresponding
source package is not included on this disc. This may be because the binary
package does not have a corresponding source package, or because the version of
the source package available was not the same as that of the binary.

EOF

cat > chroot/source-download.sh << EOF
#!/bin/sh
cd source.pkgs
PACKAGE="\${1}"
if ! apt-get ${APT_OPTIONS} --download-only source \${PACKAGE}
then
	dpkg -l \${PACKAGE} | tail -n1 >> ../missing-source.txt
	touch ../missing-source-some
fi
EOF

while read -r PACKAGE
do
	Chroot chroot "sh source-download.sh ${PACKAGE}" || true
done < source-selection.txt
rm -f source-selection.txt
rm -f chroot/source-download.sh

if [ -e chroot/missing-source-some ]
then
	mv chroot/missing-source.txt source/missing-source.txt
	rm -f chroot/missing-source-some
else
	rm -f chroot/missing-source.txt
fi

# Sort sources
for DSC in chroot/source.pkgs/*.dsc
do
	SOURCE="$(sed -n 's|^Source: ||p' ${DSC} 2>/dev/null || :)"
	# The sed may fail if multiple dsc files exist for same source, as the
	# first one to match will have already been moved.
	[ -n "$SOURCE" ] || continue

	case "${SOURCE}" in
		lib?*)
			LETTER="$(echo ${SOURCE} | sed 's|\(....\).*|\1|')"
			;;

		*)
			LETTER="$(echo ${SOURCE} | sed 's|\(.\).*|\1|')"
			;;
	esac

	# Install directory
	mkdir -p source/debian/"${LETTER}"/"${SOURCE}"

	# Move files
	mv chroot/source.pkgs/"${SOURCE}"_* source/debian/"${LETTER}"/"${SOURCE}"
done

rmdir --ignore-fail-on-non-empty chroot/source.pkgs

# Reverting apt sources again
if [ -e chroot/etc/apt/sources.list.d/progress-linux.list.orig ]
then
	mv chroot/etc/apt/sources.list.d/progress-linux.list.orig chroot/etc/apt/sources.list.d/progress-linux.list

	Apt chroot update
fi

# Creating stage file
Create_stagefile .build/source_debian
Create_stagefile .build/source
